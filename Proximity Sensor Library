#ifndef EGR_326_LIBRARIES_H_
#define EGR_326_LIBRARIES_H_

#define PROX P2 //macros
#define TRIG BIT5
#define ECHO BIT6
#define SOUND BIT7
#define PROX_LED BIT4

/* ---------- Port Library ---------- */
void Port_Init();

/* ---------- SysTick Library ---------- */
void SysTick_Init();

/* ---------- Timer A Library ---------- */
void Timer_A0_Init();
void LED_intensity(float DC);

/* ---------- Global Variables ---------- */
int SysTick_time_ms;
int read_data;
uint8_t distance;
float rise, raw_dist, period, duty_cycle;

float period_irq, curr_edge, last_edge;;

int timerA_flag, blink_flag;
#endif /* EGR_326_LIBRARIES_H_ */





----------------------------------------------------------------------------------------------------------------------










#include "msp.h"
#include "stdio.h"
#include "EGR_326_libraries.h"

/* ---------- Port Library ---------- */
void Port_Init(){

    // Port 2.4 - Timer A0.1 (Compare Mode -> LED PWM)
    // Port 2.5 - Timer A0.2 (Compare Mode -> Proximity PWM Echo)
    // Port 2.6 - Timer A0.3 (Capture Mode -> Measure Intervals Trig)
    PROX->SEL0 |=  (PROX_LED | TRIG | ECHO);
    PROX->SEL1 &= ~(PROX_LED | TRIG | ECHO);
    PROX->DIR  |=  (PROX_LED | TRIG); // Compare Mode
    PROX->DIR  &= ~ECHO;          // Capture Mode
}

/* ---------- SysTick Library ---------- */
void SysTick_Init(){
    SysTick->CTRL = 0;
    SysTick->LOAD = (SysTick_time_ms * 3000) - 1;   // 1000 ms -> 1 second
    SysTick->VAL  = 0;
    SysTick->CTRL = 0x00000007; // SysTick Interrupt Enabled
}

void SysTick_Handler(void){

    read_data = 1; //flag to print every 2 sec

    if(blink_flag == 1){
        PROX->OUT ^= PROX_LED; //toggle LED every 2 sec
    }
}

/* ---------- Timer A Library ---------- */
void Timer_A0_Init(){

    TIMER_A0->CCR[0] = period;

    // Timer A0.1 (Compare Mode) -> LED Intensity:
    TIMER_A0->CCR[1]  = duty_cycle;
    TIMER_A0->CCTL[1] = TIMER_A_CCTLN_OUTMOD_7;

    // Timer A0.2 (Compare Mode) -> Trigger Signal:
    TIMER_A0->CCR[2]  = duty_cycle; //should be 60 ms to start
    TIMER_A0->CCTL[2] = TIMER_A_CCTLN_OUTMOD_7;

    // Timer A0.3 (Capture Mode) -> Echo Signal:
    TIMER_A0->CTL |= TIMER_A_CTL_TASSEL_2 | // Use SMCLK as clock source,
            TIMER_A_CTL_MC_2     | // Start timer in continuous mode
            TIMER_A_CTL_CLR;       // clear TA0R

    TIMER_A0->CCTL[3] = TIMER_A_CCTLN_CM__BOTH   | // Capture rising and falling edges
            TIMER_A_CCTLN_CCIS_0 | // Use CCI2A
            TIMER_A_CCTLN_CCIE   | // Enable capture interrupt
            TIMER_A_CCTLN_CAP    | // Enable capture mode
            TIMER_A_CCTLN_SCS;     // Synchronous capture
}

void TA0_N_IRQHandler(void){

    raw_dist = TIMER_A0->CCR[3]; //load duty cycle dist with val read from signal
    TIMER_A0->CCTL[3] &= ~(TIMER_A_CCTLN_CCIFG); //clear flag
}

void LED_intensity(float DC){

    TIMER_A0->CCR[1] = (int)(DC * 65535);

}

